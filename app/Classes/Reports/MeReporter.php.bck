<?php

namespace App\Classes\Reports;

use Illuminate\Support\Facades\DB;
use App\Classes\Reports\IReporter;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Cell\Coordinate;

class MeReporter implements iReporter {

    private $initDate;
    private $endDate;
    private $location;
    private $result;

    public function setParams($params){
        $tmpDates = explode(" - ", $params["daterange"]);
        $this->initDate = $tmpDates[0];
        $this->endDate = $tmpDates[1];
        if(is_numeric($params["location"]))
            $locations = $this->getLocations($params["location"]);
        else
            $locations = "'".$params["location"]."'";
        $this->location = $locations;
    }

    public function getLocations($idEmpresa)
    {
        $sql = "SELECT * FROM sucursales WHERE idEmpresa = ?;";
        $locations = DB::select($sql,[$idEmpresa]);
        $locationStr ="";
        $locationArr = array();
        foreach($locations as $location)
        {
            $locationArr[] = "'".$location->idMicros."'";
        }
        return implode(",",$locationArr);
        
    }

    public function runReport(){
        $sql = "SELECT clas.idMajor, mmg.major, SUM(ventaBruta) ventaBruta, SUM(ventaNeta) ventaNeta, SUM(vmpm.ventaNetaImp)ventaNetaImp, SUM(descuento)descuento, 0 AS salesPercent, SUM(vmpm.cantidad*rp.costo) AS costo FROM venta_mes_producto_micros vmpm LEFT JOIN micros_producto_clasificacion clas ON vmpm.idMicros = clas.idMicros LEFT JOIN micros_major_group mmg ON mmg.idMajor = clas.idMajor LEFT JOIN recetas_platillo rp ON rp.idMicros = vmpm.idMicros WHERE clas.idMajor != 0 AND vmpm.idSucMicros IN (".$this->location.") AND vmpm.fecha BETWEEN ? AND ?  GROUP BY clas.idMajor, mmg.major ORDER BY clas.idMajor;";
        $this->result = DB::select($sql,[$this->location, $this->initDate, $this->endDate]);
        $tmpGrossTotal=0;
        $tmpNetTotal=0;
        $tmpventaNetaImp=0;
        $tmpCosto=0;
        foreach($this->result as $row){
            $tmpGrossTotal +=$row->ventaBruta;
            $tmpNetTotal +=$row->ventaNeta;
            $tmpventaNetaImp += $row->ventaNetaImp;
            $tmpCosto += $row->costo;
        }
        foreach($this->result as $id => $row){
            $this->result[$id]->salesPercent = !empty($tmpGrossTotal)?$row->ventaBruta*100/$tmpGrossTotal:0;
        }
        $this->result[] = json_decode(json_encode(array("idMajor" => 0, "major" => "Total", "ventaBruta" =>$tmpGrossTotal, "ventaNeta" => $tmpNetTotal, "ventaNetaImp" =>$tmpventaNetaImp, "salesPercent" => 100, "costo" => $tmpCosto )));
    }

    public function getResult($type){
        if($type == "xlsx"){
            $this->exportReport();
        }
        else
        {
            $parser = new ReportParser($type);
            return $parser->parse($this->result);
        }
    }

    public function exportReport(){
        $sql = "SELECT clas.idMajor, mmg.major, SUM(ventaBruta) ventaBruta, SUM(ventaNeta) ventaNeta, SUM(vmpm.ventaNetaImp)ventaNetaImp, SUM(descuento)descuento, 0 AS salesPercent, SUM(vmpm.cantidad*rp.costo) AS costo FROM venta_mes_producto_micros vmpm LEFT JOIN micros_producto_clasificacion clas ON vmpm.idMicros = clas.idMicros LEFT JOIN micros_major_group mmg ON mmg.idMajor = clas.idMajor LEFT JOIN recetas_platillo rp ON rp.idMicros = vmpm.idMicros WHERE clas.idMajor != 0 AND  vmpm.idSucMicros IN (".$this->location.") AND vmpm.fecha BETWEEN ? AND ?  GROUP BY clas.idMajor, mmg.major ORDER BY clas.idMajor;";
        $tmpResult = DB::select($sql,[ $this->initDate, $this->endDate]);
        $tmpGrossTotal=0;
        $tmpNetTotal=0;
        $tmpventaNetaImp=0;
        $tmpCosto=0;
        foreach($tmpResult as $row){
            $tmpGrossTotal +=$row->ventaBruta;
            $tmpNetTotal +=$row->ventaNeta;
            $tmpventaNetaImp += $row->ventaNetaImp;
            $tmpCosto += $row->costo;
        }
        foreach($tmpResult as $id => $row){
            $tmpResult[$id]->salesPercent = !empty($tmpGrossTotal)?$row->ventaBruta*100/$tmpGrossTotal:0;
        }

        $tmpResult[] = json_decode(json_encode(array("idMajor" => 0, "major" => "Total", "ventaBruta" =>$tmpGrossTotal, "ventaNeta" => $tmpNetTotal, "ventaNetaImp" =>$tmpventaNetaImp, "salesPercent" => 0, "costo" => $tmpCosto )));

        $sql = "SELECT VT.* , (VT.cantidad * rp.costo) AS costo, VT.ventaBruta - (VT.cantidad * rp.costo) Margen, 0 AS salesPercent  FROM (SELECT vmpm.idMicros, mmg.major ,vmpm.idItemMicros , SUM(vmpm.ventaBruta) ventaBruta, SUM(vmpm.ventaNeta) ventaNeta, SUM(vmpm.ventaNetaImp)ventaNetaImp, SUM(vmpm.descuento)descuento, SUM(vmpm.cantidad) cantidad FROM venta_mes_producto_micros vmpm LEFT JOIN micros_producto_clasificacion clas ON vmpm.idMicros = clas.idMicros LEFT JOIN micros_major_group mmg ON mmg.idMajor = clas.idMajor WHERE mmg.idMajor != 0 AND vmpm.idSucMicros = ? AND vmpm.fecha BETWEEN ? AND ? GROUP BY vmpm.idMicros, vmpm.idItemMicros, mmg.major HAVING SUM(vmpm.ventaNeta) >0 ORDER BY ventaBruta DESC, cantidad DESC) AS VT LEFT JOIN recetas_platillo rp ON rp.idMicros = VT.idMicros ORDER BY VT.ventaBruta DESC;";
        $tmpDetailResult = DB::select($sql,[$this->location, $this->initDate, $this->endDate]);

        $tmpGrossTotal=0;
        $tmpNetTotal=0;
        $tmpventaNetaImp=0;
        $tmpdescuento=0;
        $tmpcantidad =0;
        $tmpcosto = 0;
        foreach($tmpDetailResult as $row){
            $tmpGrossTotal +=$row->ventaBruta;
            $tmpNetTotal +=$row->ventaNeta;
            $tmpventaNetaImp += $row->ventaNetaImp;
            $tmpdescuento += $row->descuento;
            $tmpcantidad += $row->cantidad;
            $tmpcosto += $row->costo;
        }

        foreach($tmpDetailResult as $id => $row){
            $tmpDetailResult[$id]->salesPercent = !empty($tmpGrossTotal)?$row->ventaBruta*100/$tmpGrossTotal:0;
        }

        $tmpDetailResult[] = json_decode(json_encode(array("idMicros" => "", "major" => "Total", "idItemMicros" => "", "ventaBruta" =>$tmpGrossTotal, "ventaNeta" => $tmpNetTotal, "ventaNetaImp"=>$tmpventaNetaImp, "descuento"=>$tmpdescuento , "cantidad"=>$tmpcantidad, "costo" => $tmpcosto, "margen" => 0, "salesPercent" => "" )));

        $spreadsheet = new Spreadsheet();
        $spreadsheet->setActiveSheetIndex(0);
        $currentSheet = $spreadsheet->getActiveSheet();
        $spreadsheet->getDefaultStyle()->getFont()->setSize(11);

        $spreadsheet->getActiveSheet()->getColumnDimension('A')->setWidth(13);
        $spreadsheet->getActiveSheet()->getColumnDimension('B')->setWidth(20);
        $spreadsheet->getActiveSheet()->getColumnDimension('C')->setWidth(12);
        $spreadsheet->getActiveSheet()->getColumnDimension('D')->setWidth(12);
        $spreadsheet->getActiveSheet()->getColumnDimension('E')->setWidth(12);
        $spreadsheet->getActiveSheet()->getColumnDimension('F')->setWidth(12);

        $currentSheet->mergeCells('B2:D2');
        $currentSheet->mergeCells('B3:D3');
        $currentSheet->mergeCells('B4:D4');
        $currentSheet->mergeCells('B5:D5');

        $spreadsheet->getActiveSheet()->getStyle('A2:A5')->getFill()
        ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
        ->getStartColor()->setARGB('ffe3e3e3');

        $spreadsheet->getActiveSheet()->getStyle('A2:A5')
            ->getAlignment()->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_LEFT);


        $spreadsheet->getActiveSheet()->getStyle('A2:D5')->getBorders()->applyFromArray( [ 'allBorders' => [ 'borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN ] ] );    
        
        $spreadsheet->getActiveSheet()->getStyle('A7:E7')->getFill()
        ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
        ->getStartColor()->setARGB('ffe3e3e3');

        $currentSheet->setCellValue('A2', 'Report');
        $currentSheet->setCellValue('A3', 'Business Date');
        $currentSheet->setCellValue('A4', 'Location');
        $currentSheet->setCellValue('A5', 'Export Date');
    
        $currentSheet->setCellValue('B2', 'Menu Enginerring');
        $currentSheet->setCellValue('B3', $this->initDate . " - " . $this->endDate);
        $currentSheet->setCellValue('B4', strtoupper($this->location));
        $currentSheet->setCellValue('B5', date("Y-m-d"));

        $currentSheet->setCellValue('A7', 'Major Grp');
        $currentSheet->setCellValue('B7', 'Gross Sales');
        $currentSheet->setCellValue('C7', 'Net Sales');
        $currentSheet->setCellValue('D7', 'Food Cost');
        $currentSheet->setCellValue('E7', 'Sales %');

        $row = 8;
        foreach($tmpResult as $data)
        {
            $currentSheet->setCellValue('A'.$row, $data->major);
            $currentSheet->setCellValue('B'.$row, $data->ventaNeta);
            $currentSheet->setCellValue('C'.$row, $data->ventaBruta);
            $currentSheet->setCellValue('D'.$row, $data->costo);
            $currentSheet->setCellValue('E'.$row, $data->salesPercent);
            $row++;
        }

        $endRowFormat = $row-1;
        
        $spreadsheet->getActiveSheet()->getStyle('A8:A'.$endRowFormat)
            ->getAlignment()->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_LEFT);
            
        $spreadsheet->getActiveSheet()->getStyle('A7:E'.$endRowFormat)->getBorders()->applyFromArray( [ 'allBorders' => [ 'borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN ] ] );

        $row +=2;
        
        $initRowFormat = $row;

        $currentSheet->setCellValue('A'.$row, 'Major Grp');
        $currentSheet->setCellValue('B'.$row, 'Menu Item');
        $currentSheet->setCellValue('C'.$row, 'Quantity');
        $currentSheet->setCellValue('D'.$row, 'Gross Sales');
        $currentSheet->setCellValue('E'.$row, 'Net Sales');
        $currentSheet->setCellValue('F'.$row, 'Discount');
        $currentSheet->setCellValue('G'.$row, 'Food Cost');
        $currentSheet->setCellValue('H'.$row, 'Sales %');

        $spreadsheet->getActiveSheet()->getStyle('A'.$row.':H'.$row)->getFill()
        ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
        ->getStartColor()->setARGB('ffe3e3e3');

        $row++;
        foreach($tmpDetailResult as $data)
        {
            $currentSheet->setCellValue('A'.$row, $data->major);
            $currentSheet->setCellValue('B'.$row, $data->idItemMicros);
            $currentSheet->setCellValue('C'.$row, $data->cantidad);
            $currentSheet->setCellValue('D'.$row, $data->ventaNeta);
            $currentSheet->setCellValue('E'.$row, $data->ventaBruta);
            $currentSheet->setCellValue('F'.$row, $data->descuento);
            $currentSheet->setCellValue('G'.$row, $data->costo);
            $currentSheet->setCellValue('H'.$row, $data->salesPercent);
            $row++;
        }
        $endRowFormat = $row-1;
        $spreadsheet->getActiveSheet()->getStyle('A'.$initRowFormat.':B'.$endRowFormat)
        ->getAlignment()->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_LEFT);

        $spreadsheet->getActiveSheet()->getStyle('A'.$initRowFormat.':H'.$endRowFormat)->getBorders()->applyFromArray( [ 'allBorders' => [ 'borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN ] ] );


        $writer = IOFactory::createWriter($spreadsheet, "Xlsx");
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment; filename="MenuEng_'.date("Ymd").'.xlsx"');
        $writer->save("php://output");

    }

}